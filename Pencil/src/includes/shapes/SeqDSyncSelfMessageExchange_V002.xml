<Shape id="SeqDSyncSelfMessageExchange_V002" displayName="Self Call" icon="icons/selfCall.png">
    <Properties>
        <PropertyGroup name="Properties">
            <Property name="HNDLstartHandle"  displayName="Start" p:connectTo="*" 
              type="Handle">5,0</Property>
            <Property name="HNDLendHandle"  displayName="End" p:connectTo="*" 
              type="Handle"
              p:lockX="true" p:expressionX="$HNDLstartHandle.x"
              p:minY="$HNDLstartHandle.y">5,40</Property>            
            <Property name="COLRmessageStrokeColor" displayName="Message Line Color" type="Color"><E>$$defaultStrokeColor</E></Property>
            <Property name="COLRactiveFillColor" displayName="Activation Fill Color" type="Color">#CCCCCCFF</Property>
            <Property name="COLRactiveStrokeColor" displayName="Activation Line Color" type="Color"><E>$$defaultStrokeColor</E></Property>
            <Property name="DIMNactivationSize"  displayName="Activation Size" type="Dimension">10,150</Property>
            <Property name="DIMNselfSize"  displayName="Self Size" type="Dimension">30,10</Property>
            <Property name="HNDLcallLabelHandle"  displayName="Call" 
              type="Handle"
              p:minX="$DIMNselfSize.w" 
              p:minY="$HNDLstartHandle.y - 20" p:maxY="$HNDLstartHandle.y + 20" 
              >30,-5</Property>
            <Property name="TTXTcallLabel"  displayName="Call Label"
              p:editInfo="({targetName: 'text', font: $textFont, align: $ALGNtextAlignment, multi: true})" type="PlainText" />
            <Property name="HNDLresponseLabelHandle" displayName="Response" 
              type="Handle"
              p:minX="$DIMNselfSize.w"
              p:minY="$HNDLendHandle.y - 20" p:maxY="$HNDLendHandle.y + 20" 
              >30,45</Property>
            <Property name="TTXTresponseLabel" displayName="Response Label"
              p:editInfo="({targetName: 'text', font: $textFont, align: $ALGNtextAlignment, multi: true})" type="PlainText" />
            <Property name="textColor" displayName="Text Color" type="Color"><E>$$defaultTextColor</E></Property>
            <Property name="textFont" displayName="Font" type="Font"><E>$$defaultTextFont</E></Property>
            <Property name="ALGNtextAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        </PropertyGroup>
    </Properties>
    <Behaviors>
        <For ref="callMessage">
            <StrokeColor>$COLRmessageStrokeColor</StrokeColor>
            <D>[M($HNDLstartHandle.x + $DIMNactivationSize.w / 2, $HNDLstartHandle.y), 
                L($HNDLstartHandle.x + $DIMNactivationSize.w / 2 + $DIMNselfSize.w, $HNDLstartHandle.y),
                Q($HNDLstartHandle.x + $DIMNactivationSize.w / 2 + $DIMNselfSize.w +  $DIMNselfSize.h, $HNDLstartHandle.y + 0.5 * $DIMNselfSize.h, $HNDLstartHandle.x + $DIMNactivationSize.w / 2 + $DIMNselfSize.w, $HNDLstartHandle.y + $DIMNselfSize.h),
                L($HNDLstartHandle.x + $DIMNactivationSize.w, $HNDLstartHandle.y + $DIMNselfSize.h)]</D>
        </For>
        <For ref="responseMessage">
            <StrokeColor>$COLRmessageStrokeColor</StrokeColor>
            <D>[M($HNDLstartHandle.x + $DIMNactivationSize.w, $HNDLendHandle.y - $DIMNselfSize.h), 
                L($HNDLstartHandle.x + $DIMNactivationSize.w / 2 + $DIMNselfSize.w, $HNDLendHandle.y - $DIMNselfSize.h),
                Q($HNDLstartHandle.x + $DIMNactivationSize.w / 2 + $DIMNselfSize.w + $DIMNselfSize.h, $HNDLendHandle.y - 0.5 * $DIMNselfSize.h, $HNDLstartHandle.x + $DIMNactivationSize.w / 2 + $DIMNselfSize.w, $HNDLendHandle.y),
                L($HNDLstartHandle.x + $DIMNactivationSize.w / 2, $HNDLendHandle.y)]</D>
        </For>
        <For ref="inActiveRect">
            <Box>new Dimension($DIMNactivationSize.w, Math.abs($HNDLstartHandle.y - $HNDLendHandle.y))</Box>
            <Fill>Color.fromString("#ffffffff")</Fill>
            <StrokeColor>$COLRactiveStrokeColor</StrokeColor>
            <Transform>[translate($HNDLstartHandle.x - $DIMNactivationSize.w / 2, $HNDLstartHandle.y)]</Transform>
        </For>
        <For ref="activeRect">
            <Box>new Dimension($DIMNactivationSize.w, Math.abs($HNDLstartHandle.y - $HNDLendHandle.y) - 2 * $DIMNselfSize.h)</Box>
            <Fill>$COLRactiveFillColor</Fill>
            <StrokeColor>$COLRactiveStrokeColor</StrokeColor>
            <Transform>[translate($HNDLstartHandle.x, $HNDLstartHandle.y + $DIMNselfSize.h)]</Transform>
        </For>
        <For ref="callText">
            <DomContent>F.buildTextWrapDomContent(F._target, $TTXTcallLabel.value, 300, $ALGNtextAlignment)</DomContent>
            <Font>$textFont</Font>
            <Color>$textColor</Color>
            <Transform>[translate(parseFloat($HNDLcallLabelHandle.x) - $ALGNtextAlignment.h * 150, $HNDLcallLabelHandle.y)]</Transform>
        </For>
        <For ref="responseText">
            <DomContent>F.buildTextWrapDomContent(F._target, $TTXTresponseLabel.value, 300, $ALGNtextAlignment)</DomContent>
            <Font>$textFont</Font>
            <Color>$textColor</Color>
            <Transform>[translate(parseFloat($HNDLresponseLabelHandle.x) - $ALGNtextAlignment.h * 150, $HNDLresponseLabelHandle.y)]</Transform>
        </For>
        <For ref="arrowCallPath">
            <StrokeColor>$COLRmessageStrokeColor</StrokeColor>
            <Fill>$COLRmessageStrokeColor</Fill>
            <D><![CDATA[            
                var arrowHead = collection.arrowheadCreateSVG("full");
                arrowHead;
            ]]></D>

        </For>
        <For ref="arrowResponsePath">
            <StrokeColor>$COLRmessageStrokeColor</StrokeColor>
            <Fill>Color.fromString("transparent")</Fill>
            <D><![CDATA[
                var arrowHead = collection.arrowheadCreateSVG("open");
                arrowHead;
            ]]></D>

        </For>

    </Behaviors>
    <Actions>
        <Action id="getConnectorOutlets">
            <Impl>
                <![CDATA[
                    var dist = 5;                  
                    var outlets = [ ];
                  
                    var HNDLstartHandle = this.getProperty("HNDLstartHandle");
                    var HNDLendHandle = this.getProperty("HNDLendHandle");
                    var DIMNactivationSize = this.getProperty("DIMNactivationSize");

                    if (HNDLendHandle.y > HNDLstartHandle.y) {
                        for (var i = HNDLstartHandle.y ; i < HNDLendHandle.y; i = i + dist) {
                            outlets.push( new Outlet("SelfActivation" + i.toString(), "Bounding", HNDLstartHandle.x +  DIMNactivationSize.w/2, i) );
                        }
                    }
                  
                  
                    return outlets;
                ]]>
            </Impl>
        </Action>        
    </Actions>
    <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"
               xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
               xmlns="http://www.w3.org/2000/svg">
        <defs>
            <marker
               id="arrowCall"
               orient="auto"
               refY="0.0"
               refX="0.0"
               style="overflow:visible;">

               <path
                  id="arrowCallPath"
                  transform="rotate(180) translate(1,0)"
                  style="fill-rule:evenodd;stroke-width:0.8;stroke-linejoin:round;stroke:#000000;stroke-opacity:1;fill:#000000;fill-opacity:1"
                  />
            </marker>
            <marker
               id="arrowResponse"
               orient="auto"
               refY="0.0"
               refX="0.0"
               style="overflow:visible;">

               <path
                  id="arrowResponsePath"
                  transform="rotate(180) translate(1,0)"
                  style="fill-rule:evenodd;stroke-width:0.9;stroke-linejoin:round;stroke:#000000;stroke-opacity:1;fill:#000000;fill-opacity:1"
                  />
            </marker>
        </defs>

        <path id="callMessage"
               style="fill:none;fill-rule:evenodd;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1"            
               marker-end   = "url(#arrowCall)"
        />
        <path id="responseMessage"
               style="fill:none;fill-rule:evenodd;stroke-width:1;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:4;stroke-opacity:1"        
               marker-end   = "url(#arrowResponse)"
        />
        <rect id="inActiveRect" x="0" y="0" />        
        <rect id="activeRect" x="0" y="0" />        
        <text id="callText" xml:space="preserve" />
        <text id="responseText" xml:space="preserve" />
    </p:Content>
</Shape>
