<Shape id="AccessRWCurvedVertical" displayName="vert. mod. Access" icon="icons/lineV.png" system="true">
    <Properties>
        <PropertyGroup name="Line">
            <Property name="isHorizontal" p:disabled="true" displayName="Horizontal" type="Bool">false</Property>
            <Property name="alignType"  displayName="Alignment" 
                  p:enumValues="['start|Start', 'center|Center', 'end|End', 'control|Control']"
                  type="Enum">center</Property>
            <Property name="curvedOffset" p:disabled="$curvedRW.value === false" displayName="Curved RW Offset" type="Enum"
                p:enumValues="['5|5', '10|10', '15|15']">10</Property>
            <Property name="distance" p:disabled="true"
                    p:minX="10" p:maxX="50" p:minY="10" p:maxY="50"
                    p:lockX="!$isHorizontal.value === false" p:lockY="$isHorizontal.value === false"
                    displayName="Curved Arrow distance" type="Handle">20,15</Property>
            <Property name="curvedRadius" p:disabled="$curvedRW.value === false" displayName="Curved RW Radius" type="Enum"
                p:enumValues="['10|10', '15|15', '20|20', '30|30', '40|40']">20</Property>
            <Property name="p1" p:connectTo="*" displayName="Begin" type="Handle">0,0</Property>
            <Property name="p2" p:connectTo="*" displayName="End" type="Handle">0,50</Property>
            <Property name="c3" displayName="Control" type="Handle" 
                      p:disabled="!($alignType.value == 'control')"
                      >0,25</Property>
            <Property name="strokeColor" displayName="Line Color" type="Color"><E>$$defaultStrokeColor</E></Property>
            <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle"><E>$$defaultEdgeStrokeStyle</E></Property>
        </PropertyGroup>
        <PropertyGroup name="Text">
            <Property name="textPos" p:disabled="$textContent.value.length == 0" displayName="Text Position" type="Handle">40,25</Property>
            <Property name="textContent" displayName="Content"
              p:editInfo="var targetBox = F.getObjectBoundingBox('text'); var sizeBox = F.textSize('text'); var newBox = new Bound(targetBox.x, targetBox.y + ((sizeBox.h / 2) - 10), Math.sqrt((sizeBox.w * sizeBox.w) + (sizeBox.h * sizeBox.h)) + 10 , 20); ({targetName: 'text', bound: newBox , font: $textFont, align: $textAlignment, multi: true})"
              type="PlainText" />
            <Property name="textFont" displayName="Font" type="Font"><E>$$defaultTextFont</E></Property>
            <Property name="textColor" displayName="Text Color" type="Color"><E>$$defaultTextColor</E></Property>
            <Property name="textAlignment" displayName="Text Alignment" type="Alignment">0,1</Property>
        </PropertyGroup>
    </Properties>
    <Behaviors>
      <For ref="ArrowStartPath">
        <Fill><![CDATA[
          var arrowHeadFill = collection.arrowheadDetermineFill('full', $strokeColor);
          arrowHeadFill;
        ]]></Fill>
        <StrokeColor>$strokeColor</StrokeColor>
        <D><![CDATA[
            var arrowHead = collection.arrowheadCreateSVG('full');
            arrowHead;
        ]]></D>
          <Visibility>$hasArrowStart.value</Visibility>
      </For>
      <For ref="ArrowEndPath">
          <Fill><![CDATA[
            var arrowHeadFill = collection.arrowheadDetermineFill('full', $strokeColor);
            arrowHeadFill;
          ]]></Fill>
          <StrokeColor>$strokeColor</StrokeColor>
          <D><![CDATA[
            var arrowHead = collection.arrowheadCreateSVG('full');
            arrowHead;
          ]]></D>

          <Visibility>$hasArrowEnd.value</Visibility>
      </For>
      <For ref="readCurved">
          <D>[M( $isHorizontal.value ? $p1.x : parseFloat($c3.x) + parseFloat($curvedOffset.value) ,
                 $isHorizontal.value ? parseFloat($c3.y) + parseFloat($curvedOffset.value) : $p1.y
                ),
              Q( $isHorizontal.value ? (parseFloat($p2.x)-parseFloat($p1.x))/2 + parseFloat($p1.x) : parseFloat($c3.x) + parseFloat($curvedOffset.value) + parseFloat($curvedRadius.value)  ,
                 $isHorizontal.value ? parseFloat($c3.y) + parseFloat($curvedOffset.value) + parseFloat($curvedRadius.value) : ($p2.y-$p1.y)/2 + parseFloat($p1.y),
                 $isHorizontal.value ? $p2.x : parseFloat($c3.x) + parseFloat($curvedOffset.value) ,
                 $isHorizontal.value ? parseFloat($c3.y) + parseFloat($curvedOffset.value) : $p2.y
               )]
          </D>
          <StrokeColor>$strokeColor</StrokeColor>
          <StrokeStyle>$strokeStyle</StrokeStyle>
      </For>
      <For ref="readCurvedGrip">
        <D>[M( $isHorizontal.value ? $p1.x : parseFloat($c3.x) + parseFloat($curvedOffset.value) ,
               $isHorizontal.value ? parseFloat($c3.y) + parseFloat($curvedOffset.value) : $p1.y
              ),
            Q( $isHorizontal.value ? ($p2.x-$p1.x)/2 + $p1.x : parseFloat($c3.x) + parseFloat($curvedOffset.value) + parseFloat($curvedRadius.value) ,
               $isHorizontal.value ? +$c3.y + $curvedOffset.value/1 + $curvedRadius.value/1 : ($p2.y-$p1.y)/2 + $p1.y ,
               $isHorizontal.value ? $p2.x : parseFloat($c3.x) + parseFloat($curvedOffset.value) ,
               $isHorizontal.value ? parseFloat($c3.y) + parseFloat($curvedOffset.value) : $p2.y
             )]
        </D>
      </For>
      <For ref="writeCurved">
        <D>[M( $isHorizontal.value ? $p1.x : $c3.x-$curvedOffset.value ,
               $isHorizontal.value ? $c3.y - $curvedOffset.value : $p1.y
              ),
            Q( $isHorizontal.value ? ($p2.x-$p1.x)/2 + $p1.x : $c3.x - $curvedRadius.value/1 - $curvedOffset.value ,
               $isHorizontal.value ? $c3.y - $curvedRadius.value/1 - $curvedOffset.value : ($p2.y-$p1.y)/2 + $p1.y ,
               $isHorizontal.value ? $p2.x : $c3.x - $curvedOffset.value ,
               $isHorizontal.value ? $c3.y - $curvedOffset.value : $p2.y
             )]
        </D>
          <StrokeColor>$strokeColor</StrokeColor>
          <StrokeStyle>$strokeStyle</StrokeStyle>
      </For>
      <For ref="writeCurvedGrip">
        <D>[M( $isHorizontal.value ? $p1.x : $c3.x - $curvedOffset.value ,
               $isHorizontal.value ? $c3.y - $curvedOffset.value : $p1.y
              ),
            Q( $isHorizontal.value ? ($p2.x-$p1.x)/2 + $p1.x : $c3.x - $curvedRadius.value/1 - $curvedOffset ,
               $isHorizontal.value ? $c3.y - $curvedRadius.value/1 - $curvedOffset : ($p2.y-$p1.y)/2 + $p1.y ,
               $isHorizontal.value ? $p2.x : $c3.x - $curvedOffset.value ,
               $isHorizontal.value ? $c3.y - $curvedOffset.value : $p2.y
             )]
        </D>
      </For>

      <For ref="text">
          <PlainTextContent>
            <Arg>$textContent</Arg>
            <Arg>var textSize = F.textSize("text");
                 new Bound( -textSize.w/2 + $textPos.x,
                            -textSize.h/2 + $textPos.y,
                            Math.max($textContent.value.length, 300),
                            textSize.h
                          )</Arg>
            <Arg>$textAlignment</Arg>
          </PlainTextContent>
          <Font>$textFont</Font>
          <Color>$textColor</Color>
      </For>
      <For ref="textbgRect">
        <Bound>var textSize = F.textSize("text");
                 new Bound( -textSize.w/2 + $textPos.x,
                            -textSize.h/2 + $textPos.y,
                            $textContent.value.length,
                            textSize.h
                          )
        </Bound>
      </For>

    </Behaviors>
    <Actions>
        <Action id="makeHorizontal" displayName="Make Horizontal">
            <Impl>
                var p1 = this.getProperty("p1");
                var p2 = this.getProperty("p2");
                var c3 = this.getProperty("c3");

                c3.x = (p1.x + p2.x)/2 + p1.x;
                this.setProperty("isHorizontal", true);
                this.setProperty("c3", c3);
            </Impl>
        </Action>
        <Action id="makeVertical" displayName="Make Vertical">
                <Impl>
                    var p1 = this.getProperty("p1");
                    var p2 = this.getProperty("p2");
                    var c3 = this.getProperty("c3");

                    c3.y = (p1.y + p2.y)/2 + p1.y;
                    this.setProperty("isHorizontal", false);
                    this.setProperty("c3", c3);
                </Impl>
        </Action>
    </Actions>
    <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"
               xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
               xmlns="http://www.w3.org/2000/svg">
        <defs>
            <marker
               id="ArrowEnd"
               orient="auto"
               refY="0.0"
               refX="0.0"
               style="overflow:visible;">

               <path
                  id="ArrowEndPath"
                  transform="rotate(180) translate(1,0)"
                  style="fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round;stroke:#000000;stroke-opacity:1;fill:#000000;fill-opacity:1"
                  />
            </marker>
            <marker
               id="ArrowStart"
               orient="auto"
               refY="0.0"
               refX="0.0"
               style="overflow:visible;">

               <path
                  id="ArrowStartPath"
                  transform="translate(1,0)"
                  style="fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round;stroke:#000000;stroke-opacity:1;fill:#000000;fill-opacity:1"
                  />
            </marker>

         </defs>

      <g id="CircularAccess">
        <path
           id="readCurved"
           style="stroke-linejoin: round;"
           fill="none"
           marker-start = "url(#ArrowStart)"
            />
        <path
           id="writeCurved"
           style="stroke-linejoin: round;"
           fill="none"
           marker-end   = "url(#ArrowEnd)"
            />
      </g>

        <path id="readCurvedGrip" fill="none" style="stroke: rgba(0, 0, 0, 0); stroke-width: 10px;"/>
        <path id="writeCurvedGrip" fill="none" style="stroke: rgba(0, 0, 0, 0); stroke-width: 10px;"/>
        <text id="text" text-anchor="middle" xml:space="preserve"  />
        <rect id="textbgRect" style="fill: none; stroke: none;"  />

    </p:Content>
</Shape>
