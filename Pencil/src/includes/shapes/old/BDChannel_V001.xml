<Shape id="BDChannel_V001" displayName="Channel" icon="icons/channel.png" system="true">
    <Properties>
        <PropertyGroup name="Channel Properties">
            <Property name="hasExtensionA" p:disabled="true" displayName="Has Primary Extension" type="Bool">false</Property>
            <Property name="hasExtensionB" p:disabled="true" displayName="Has Secondary Extension" type="Bool">false</Property>
            <Property name="p1" p:disabled="$hasExtensionA.value === false" p:connectTo="*" displayName="Extension Begin" type="Handle">25,0</Property>
            <Property name="p2" p:connectTo="*" displayName="Begin" type="Handle">0,0</Property>
            <Property name="p3" p:connectTo="*" displayName="End" type="Handle">0,100</Property>
            <Property name="p4" p:disabled="$hasExtensionB.value === false" p:connectTo="*" displayName="Extension End" type="Handle">-25,100</Property>
            <Property name="strokeColor" displayName="Line Color" type="Color"><E>$$defaultStrokeColor</E></Property>
            <Property name="nodeStrokeStyle" displayName="Line Style" type="StrokeStyle"><E>$$defaultNodeStrokeStyle</E></Property>
            <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle"><E>$$defaultEdgeStrokeStyle</E></Property>
            <Property name="directionType" type="Enum" displayName="Request Direction Type" p:enumValues="['none|None', 'bidirectional|Bidirectional', 'single|Single Direction']">single</Property>
            <Property name="rOffset" type="Enum" displayName="Request Symbol Offset" p:enumValues="[
                'disabled|disabled',
                '0|0',
                '5|5',
                '10|10',
                '15|15',
                '20|20',
                '25|25',
                '30|30',
                '35|35',
                '40|40',
                '45|45',
                '50|50',
                '55|55',
                '60|60',
                '65|65',
                '70|70',
                '75|75',
                '80|80',
                '85|85',
                '90|90',
                '95|95',
                '100|100'
            ]">disabled</Property>
            <Property displayName="Circle Center" name="center" type="Point"
                p:expressionX="
                $rOffset.value === 'disabled'
                    ? collection.center($p2, $p3, 'x')
                    : collection.getPointOnComplexSegment(collection.arrangeExtensionPoints({
                        mainPoints: [$p2, $p3],
                        extensionPoints: [$p1, $p4],
                        hasExtensionA: $hasExtensionA.value,
                        hasExtensionB: $hasExtensionB.value
                    }), $rOffset.value).x
                "
                p:expressionY="
                $rOffset.value === 'disabled'
                    ? collection.center($p2, $p3, 'y')
                    : collection.getPointOnComplexSegment(collection.arrangeExtensionPoints({
                        mainPoints: [$p2, $p3],
                        extensionPoints: [$p1, $p4],
                        hasExtensionA: $hasExtensionA.value,
                        hasExtensionB: $hasExtensionB.value
                        }), $rOffset.value).y" />
        </PropertyGroup>
    </Properties>
    <Behaviors>
        <For ref="R">
            <Visibility>$directionType.value !== "none"</Visibility>
            <Attr>
                <Arg>"x"</Arg>
                <Arg><![CDATA[
                    if ($directionType.value === "bidirectional") {
                        collection.ifLineVertical($p2, $p3,
                            $center.x + 15,
                            $center.x - 6.5
                        )
                    } else {
                        collection.ifLineVertical($p2, $p3,
                            $center.x + 15,
                            $center.x + collection.ifReadingDirection($p2, $p3, -12, 0)
                        )
                    }
                ]]></Arg>
            </Attr>
            <Attr>
                <Arg>"y"</Arg>
                <Arg><![CDATA[
                    if ($directionType.value === "bidirectional") {
                        collection.ifLineVertical($p2, $p3,
                            $center.y + 5,
                            $center.y - 18
                        )
                    } else {
                        collection.ifLineVertical($p2, $p3,
                            $center.y + collection.ifReadingDirection($p2, $p3, 0, 12),
                            $center.y - 18
                        )
                    }
                ]]></Arg>
            </Attr>
        </For>
        <For ref="leftTriangle">
           <D>
              var arrowHead = collection.arrowheadCreateSVG("full");
              arrowHead;
           </D>
           <Visibility>$directionType.value === "bidirectional"</Visibility>
           <Attr>
               <Arg>"transform"</Arg>
               <Arg><![CDATA[
                   var rotation = collection.ifLineVertical($p2, $p3,
                       collection.ifReadingDirection($p2, $p3, 90, 270),
                       collection.ifReadingDirection($p2, $p3, 0, 180)
                   );
                   var xoffset = collection.ifLineVertical($p2, $p3,
                       20,
                       collection.ifReadingDirection($p2, $p3, -23, 20)
                   );

                   var yoffset = collection.ifLineVertical($p2, $p3,
                       collection.ifReadingDirection($p2, $p3, -20, 20),
                       -23
                   );

                   "translate(" + ($center.x + xoffset) + "," + ($center.y + yoffset) + ") rotate(" + rotation + ") scale(1.15)"
               ]]></Arg>
           </Attr>
        </For>
        <For ref="rightTriangle">
            <D>
                var arrowHead = collection.arrowheadCreateSVG("full");
                arrowHead;
            </D>
           <Visibility>$directionType.value !== "none"</Visibility>
           <Attr>
               <Arg>"transform"</Arg>
               <Arg><![CDATA[
                   var rotation = collection.ifLineVertical($p2, $p3,
                       collection.ifReadingDirection($p2, $p3, 270, 90),
                       collection.ifReadingDirection($p2, $p3, 180, 0)
                   );
                   var xoffset = $directionType.value === "bidirectional"
                   ? collection.ifLineVertical($p2, $p3,
                       20,
                       collection.ifReadingDirection($p2, $p3, 20, -24)
                   )
                   : collection.ifLineVertical($p2, $p3,
                       20,
                       collection.ifReadingDirection($p2, $p3, 10, -14)
                   );

                   var yoffset = $directionType.value === "bidirectional"
                       ? collection.ifLineVertical($p2, $p3,
                           collection.ifReadingDirection($p2, $p3, 20, -20),
                           -23
                       )
                       : collection.ifLineVertical($p2, $p3,
                           collection.ifReadingDirection($p2, $p3, 15, -15),
                           -23
                       );

                   "translate(" + ($center.x + xoffset) + "," + ($center.y + yoffset) + ") rotate(" + rotation + ") scale(1.15)"
               ]]></Arg>
           </Attr>
        </For>
        <For ref="line">
            <D><![CDATA[
                var aPoints = collection.arrangeExtensionPoints({
                    mainPoints: [$p2, $p3],
                    extensionPoints: [$p1, $p4],
                    hasExtensionA: $hasExtensionA.value,
                    hasExtensionB: $hasExtensionB.value
                });

                var line = collection.createSVGLineThroughPoints(aPoints, true /*bRounded*/, false /*bClosed*/);
                line;
            ]]></D>
            <StrokeColor>$strokeColor</StrokeColor>
            <StrokeStyle>$strokeStyle</StrokeStyle>
        </For>
        <For ref="lineGrip">
            <D><![CDATA[
                var aPoints = collection.arrangeExtensionPoints({
                    mainPoints: [$p2, $p3],
                    extensionPoints: [$p1, $p4],
                    hasExtensionA: $hasExtensionA.value,
                    hasExtensionB: $hasExtensionB.value
                });

                var line = collection.createSVGLineThroughPoints(aPoints, true /*bRounded*/, false /*bClosed*/);
                line;
            ]]></D>
        </For>
        <For ref="circle">
           <StrokeColor>$strokeColor</StrokeColor>
           <StrokeStyle>$nodeStrokeStyle</StrokeStyle>
            <Attr>
                <Arg>"cx"</Arg>
                <Arg>$center.x</Arg>
            </Attr>
            <Attr>
                <Arg>"cy"</Arg>
                <Arg>$center.y
                </Arg>
            </Attr>
        </For>
    </Behaviors>
    <Actions>
        <Action id="invertDirection" displayName="Invert Direction">
            <Impl>
                this.def.collection.swapShapeProperties(this, "p2", "p3");
            </Impl>
        </Action>
        <Action id="makeStraight" displayName="Make Straight">
            <Impl><![CDATA[

                var pointNames = new Map();

                var p1 = this.getProperty("p1");
                var p2 = this.getProperty("p2");
                var p3 = this.getProperty("p3");
                var p4 = this.getProperty("p4");

                pointNames.set(p1, "p1");
                pointNames.set(p2, "p2");
                pointNames.set(p3, "p3");
                pointNames.set(p4, "p4");

                var aPoints = this.def.collection.arrangeExtensionPoints({
                mainPoints: [p2, p3],
                extensionPoints: [p1, p4],
                    hasExtensionA: this.getProperty("hasExtensionA").value,
                    hasExtensionB: this.getProperty("hasExtensionB").value
                }).map(oPoint => pointNames.get(oPoint));

                aPoints
                    .reduce(function (oPrevPoint, oPoint) {
                        this.def.collection.makeShapeLineStraight(this, oPrevPoint, oPoint);
                        return oPoint;
                    }.bind(this));
            ]]></Impl>
        </Action>
    </Actions>
    <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"
               xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
               xmlns="http://www.w3.org/2000/svg">
        <text
           style="font-style:normal;font-variant:normal;font-stretch:normal;font-size:13px;line-height:125%;font-family:Arial;-inkscape-font-specification:'Arial';letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.26458332px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
           id="R"><tspan
             id="Rspan">R</tspan></text>

        <path
           style="stroke-linejoin: round;"
           id="leftTriangle" />

        <path
           style="stroke-linejoin: round;"
           id="rightTriangle" />

        <path
           style="stroke-linejoin: round;"
           fill="none"
           id="line" />

        <path id="lineGrip" fill="none" style="stroke: rgba(0, 0, 0, 0); stroke-width: 10px;"/>

        <circle
           id="circle"
           style="color:#000000;display:inline;overflow:visible;visibility:visible;opacity:1;fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:#000000;stroke-width:0.79374999;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;marker:none;enable-background:accumulate"
           r="8" />
    </p:Content>
</Shape>
