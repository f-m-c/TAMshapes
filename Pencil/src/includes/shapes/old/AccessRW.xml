<Shape id="AccessRW" displayName="Access Read/Write" icon="icons/access-rw.png" system="true">
    <Properties>
        <PropertyGroup name="Access Properties">
            <Property name="hasArrowStart" p:disabled="true" displayName="Has Starting Arrow" type="Bool">true</Property>
            <Property name="hasArrowEnd" displayName="Has Ending Arrow" type="Bool">true</Property>
            <Property name="hasExtensionA" p:disabled="true" displayName="Has Primary Extension" type="Bool">false</Property>
            <Property name="hasExtensionB" p:disabled="true" displayName="Has Secondary Extension" type="Bool">false</Property>
            <Property name="p1" p:disabled="$hasExtensionA.value === false" p:connectTo="*" displayName="Extension Begin" type="Handle">25,0</Property>
            <Property name="p2" p:connectTo="*" displayName="Begin" type="Handle">0,0</Property>
            <Property name="p3" p:connectTo="*" displayName="End" type="Handle">0,100</Property>
            <Property name="p4" p:disabled="$hasExtensionB.value === false" p:connectTo="*" displayName="Extension End" type="Handle">-25,100</Property>
            <Property name="strokeColor" displayName="Line Color" type="Color"><E>$$defaultStrokeColor</E></Property>
            <Property name="strokeStyle" displayName="Line Style" type="StrokeStyle">1|</Property>
            <Property name="arrowStyle" p:disabled="$hasExtensionA.value || $hasExtensionB.vale" displayName="Arrow Style" p:enumValues="['full|Full', 'open|Open']" type="Enum">full</Property>
        </PropertyGroup>
    </Properties>
    <Behaviors>
        <For ref="line">
            <D><![CDATA[
                var aPoints = collection.arrangeExtensionPoints({
                    mainPoints: [$p2, $p3],
                    extensionPoints: [$p1, $p4],
                    hasExtensionA: $hasExtensionA.value,
                    hasExtensionB: $hasExtensionB.value
                });

                var line = collection.createSVGLineThroughPoints(aPoints, true /*bRounded*/, false /*bClosed*/);
                line;
            ]]></D>
            <StrokeColor>$strokeColor</StrokeColor>
            <StrokeStyle>$strokeStyle</StrokeStyle>
        </For>
        <For ref="lineGrip">
            <D><![CDATA[
                var aPoints = collection.arrangeExtensionPoints({
                    mainPoints: [$p2, $p3],
                    extensionPoints: [$p1, $p4],
                    hasExtensionA: $hasExtensionA.value,
                    hasExtensionB: $hasExtensionB.value
                });

                var line = collection.createSVGLineThroughPoints(aPoints, true /*bRounded*/, false /*bClosed*/);
                line;
            ]]></D>
        </For>
        <For ref="ArrowEndPath">
            <CustomStyle>
                <Arg>"display"</Arg>
                <Arg><![CDATA[
                    $hasArrowEnd.value ? "visible" : "none"
                ]]></Arg>
            </CustomStyle>
            <Fill><![CDATA[
                if ($arrowStyle.value === "open") {
                    Color.fromString("transparent");
                } else {
                    $strokeColor;
                }
            ]]></Fill>
            <StrokeColor>$strokeColor</StrokeColor>
            <D><![CDATA[
                if ($arrowStyle.value === "open") {
                    "M 8.7185878,4.0337352 L -1.5,0.016013256 L 8.7185884,-4.0017078"
                } else {
                    "M 8.7185878,4.0337352 L -2.2072895,0.016013256 L 8.7185884,-4.0017078 C 6.9730900,-1.6296469 6.9831476,1.6157441 8.7185878,4.0337352 z"
                }
            ]]></D>
        </For>
        <For ref="ArrowStartPath">
            <CustomStyle>
                <Arg>"display"</Arg>
                <Arg><![CDATA[
                    $hasArrowStart.value ? "visible" : "none"
                ]]></Arg>
            </CustomStyle>
            <Fill><![CDATA[
                if ($arrowStyle.value === "open") {
                    Color.fromString("transparent");
                } else {
                    $strokeColor;
                }
            ]]></Fill>
            <StrokeColor>$strokeColor</StrokeColor>
            <D><![CDATA[
                if ($arrowStyle.value === "open") {
                    "M 8.7185878,4.0337352 L -1.5,0.016013256 L 8.7185884,-4.0017078"
                } else {
                    "M 8.7185878,4.0337352 L -2.2072895,0.016013256 L 8.7185884,-4.0017078 C 6.9730900,-1.6296469 6.9831476,1.6157441 8.7185878,4.0337352 z"
                }
            ]]></D>
        </For>
    </Behaviors>
    <Actions>
        <Action id="invertDirection" displayName="Invert Direction">
            <Impl>
                this.def.collection.swapShapeProperties(this, "p2", "p3");
            </Impl>
        </Action>
        <Action id="makeStraight" displayName="Make Straight">
            <Impl><![CDATA[

                var pointNames = new Map();

                var p1 = this.getProperty("p1");
                var p2 = this.getProperty("p2");
                var p3 = this.getProperty("p3");
                var p4 = this.getProperty("p4");

                pointNames.set(p1, "p1");
                pointNames.set(p2, "p2");
                pointNames.set(p3, "p3");
                pointNames.set(p4, "p4");

                var aPoints = this.def.collection.arrangeExtensionPoints({
                mainPoints: [p2, p3],
                extensionPoints: [p1, p4],
                    hasExtensionA: this.getProperty("hasExtensionA").value,
                    hasExtensionB: this.getProperty("hasExtensionB").value
                }).map(oPoint => pointNames.get(oPoint));

                aPoints
                    .reduce(function (oPrevPoint, oPoint) {
                        this.def.collection.makeShapeLineStraight(this, oPrevPoint, oPoint);
                        return oPoint;
                    }.bind(this));
            ]]></Impl>
        </Action>
    </Actions>
    <p:Content xmlns:p="http://www.evolus.vn/Namespace/Pencil"
               xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
               xmlns="http://www.w3.org/2000/svg">
        <defs>
            <marker
               id="ArrowEnd"
               orient="auto"
               refY="0.0"
               refX="0.0"
               style="overflow:visible;">

               <path
                  id="ArrowEndPath"
                  style="fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round;stroke:#000000;stroke-opacity:1;fill:#000000;fill-opacity:1"
                  transform="scale(1.1) rotate(180) translate(1,0)" />
            </marker>
            <marker
               id="ArrowStart"
               orient="auto"
               refY="0.0"
               refX="0.0"
               style="overflow:visible;">

               <path
                  id="ArrowStartPath"
                  style="fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round;stroke:#000000;stroke-opacity:1;fill:#000000;fill-opacity:1"
                  transform="scale(1.1) translate(1,0)" />
            </marker>
         </defs>

        <path
           style="stroke-linejoin: round; marker-start:url(#ArrowStart); marker-end:url(#ArrowEnd)"
           fill="none"
           id="line" />

        <path id="lineGrip" fill="none" style="stroke: rgba(0, 0, 0, 0); stroke-width: 10px;"/>

    </p:Content>
</Shape>

